name: Build Linux natives

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release, Debug, RelWithDebInfo]
        c_compiler: [gcc]

    steps:
    - uses: actions/checkout@v4
    - uses: turtlesec-no/get-ninja@1.1.0

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cd Dependencies && ./build_natives && cd .. || ls build_env/artifacts

    - name: Pack artifact
      uses: actions/upload-artifact@v3.1.3
      with:
        name: chroma-natives-linux
        path: Dependencies/build_env/artifacts
        if-no-files-found: error
        retention-days: 90
